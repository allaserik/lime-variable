generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  PARENT
  CHILD
}

enum ChoreStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

model Family {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@map("families")
}

// family can have many users but user can have only one many family
// Family -> Users (one-to-many)

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String?
  email     String   @unique
  password  String
  role      UserRole
  parentId  String?
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  family    Family   @relation(fields: [familyId], references: [id])
  familyId  String
  Chore     Chore[]
  Chore     Chore[]
  Chore     Chore[]

  @@map("users")
}

// User can have many chores but a chore can have only one User 
// User â†’ Chores (one-to-many)

model Chore {
  id            String      @id @default(uuid()) @db.Uuid
  title         String
  desc          String?
  dueDate       DateTime?
  points        Int
  status        ChoreStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  proofPhotoUrl String?

  createdBy  String //Parent ID  (who created it)
  assignedBy String // Parent ID  (who assigned it)
  assignedTo String? // Child ID or Parent ID :(who does it) As parent can assign Chore to him/her self
  // when assignedTo id null it is bounty

  submittedAt DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime?

  createdByUser  User @relation("CreatedByUser", fields: [createdBy], references: [id])
  assignedByUser User @relation("AssignedByUser", fields: [assignedBy], references: [id])
  assignedToUser User @relation("AssignedToUser", fields: [assignedTo], references: [id])

  @@map("chores")
}
